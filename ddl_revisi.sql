-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
-- @block
BEGIN;

CREATE TYPE status_transaski_penukaran AS ENUM ('PENDING', 'PROCESS', 'FAILED', 'DONE');
CREATE TYPE status_buku AS ENUM ('KOLEKSI', 'OPEN_FOR_TUKAR');



CREATE TABLE buku (
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    id_pemilik integer NOT NULL,
    isbn TEXT not null,
    judul TEXT not null ,
    penerbit TEXT not null ,
    deskripsi TEXT,
    tahun_terbit INT,
    rating_buku INT,
    status status_buku DEFAULT 'KOLEKSI',
    created TIMESTAMPTZ not null DEFAULT NOW(),
    last_updated TIMESTAMPTZ not null DEFAULT NOW(),
    PRIMARY KEY(id)
);

-- penulis
CREATE TABLE penulis (
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    nama TEXT  not null,
    last_updated TIMESTAMPTZ not null DEFAULT NOW(),
    PRIMARY KEY(id)
);

-- genre
CREATE TABLE genre (
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    nama TEXT UNIQUE not null ,
    PRIMARY KEY(id)
);

-- buku_ditulis
CREATE TABLE buku_ditulis (
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    id_buku INT not null ,
    id_penulis INT not null ,
    FOREIGN KEY (id_buku) REFERENCES buku(id),
    FOREIGN KEY (id_penulis) REFERENCES penulis(id),
    PRIMARY KEY(id)
);

-- genre_buku
CREATE TABLE genre_buku (
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    id_buku INT not null ,
    id_genre INT not null ,
    FOREIGN KEY (id_buku) REFERENCES buku(id),
    FOREIGN KEY (id_genre) REFERENCES genre(id),
    PRIMARY KEY(id)
);

CREATE TABLE IF NOT EXISTS public.user
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    username text NOT NULL,
    email text NOT NULL,
    deskripsi text,
    password text NOT NULL,
    kota text,
    provinsi text,
    alamat_jalan text,
    kecamatan text,
    nomor_kontak text,
    created timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    last_update timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT user_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.wishlist
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    pembeli integer NOT NULL,
    id_buku integer NOT NULL,
    created timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT wishlist_pkey PRIMARY KEY (id)
);


CREATE TABLE IF NOT EXISTS public.transaksi_penukaran
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    pembeli_id integer NOT NULL,
    penjual_id integer NOT NULL,
    is_penjual_konfirmasi boolean NOT NULL DEFAULT false,
    is_penjual_menerima boolean NOT NULL DEFAULT false,
    is_pembeli_konfirmasi boolean DEFAULT true,
    is_pembeli_menerima boolean NOT NULL DEFAULT false,
    buku_penjual integer NOT NULL,
    buku_pembeli integer NOT NULL,
    status status_transaski_penukaran NOT NULL DEFAULT 'PENDING',
    date_konfirmasi_penjual timestamp with time zone DEFAULT NULL,
    date_konfirmasi_pembeli_menerima timestamp with time zone DEFAULT NULL,
    date_konfirmasi_penjual_menerima timestamp with time zone DEFAULT NULL,
    date_transaksi_selesai timestamp with time zone DEFAULT NULL,
    last_updated timestamp with time zone NOT NULL DEFAULT NOW(),
    created timestamp with time zone NOT NULL DEFAULT NOW(),
    PRIMARY KEY (id)
);



ALTER TABLE IF EXISTS public.transaksi_penukaran
    ADD FOREIGN KEY (pembeli_id)
    REFERENCES public.user (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;

-- @block
ALTER TABLE IF EXISTS public.buku
    ADD FOREIGN KEY (id_pemilik)
    REFERENCES public.user (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.transaksi_penukaran
    ADD FOREIGN KEY (penjual_id)
    REFERENCES public.user (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.transaksi_penukaran
    ADD FOREIGN KEY (buku_penjual)
    REFERENCES public.buku (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;

ALTER TABLE IF EXISTS public.transaksi_penukaran
    ADD FOREIGN KEY (buku_pembeli)
    REFERENCES public.buku (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.wishlist
    ADD CONSTRAINT id_buku FOREIGN KEY (id_buku)
    REFERENCES public.buku (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.wishlist
    ADD CONSTRAINT pembeli FOREIGN KEY (pembeli)
    REFERENCES public.user (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE;

-- @block
SELECT * FROM buku;

-- @block
COMMIT;

-- @block
ROLLBACK;

-- @block
END;